"""
Package setup.

Set me up with `python setup.py bdist_wheel --universal`
"""
import io
import json
import os

from setuptools import setup

# Get long description from readme
with io.open("README.md", "rt", encoding="utf8") as readmefile:
    README = readmefile.read()

# Convert emojilib json file to python dictionary, so we don't have the parse
# penalty at runtime

# The dir where this file is located is relative to the root dir (where the
# tox.ini file is located). Our tox setup will inject an env variable with that
# path, because we do isolated tox builds in non-root folders eg when running in
# parallel
SETUP_RUN_DIR = os.environ.get("TOX_INI_DIR", "./")

# Load the gemoji database as a baseline
with io.open(
    os.path.join(SETUP_RUN_DIR, "gemoji/db/emoji.json"), "rt", encoding="utf8"  # pylint: disable=bad-continuation
) as gemoji_db:
    GEMOJI_DB_DATA = json.load(gemoji_db)

EMOJI_DICT = {}

# create the dictionary of emojis, keyed by canonical name
for emoji in GEMOJI_DB_DATA:
    # the emoji canonical name; can contain spaces, replace with _
    name = "_".join(emoji["description"].split(" "))
    EMOJI_DICT[name] = {
        # the unicode codepoint sequence itself
        "emoji": emoji["emoji"],
        # any aliases the gemoji lib provides
        "aliases": tuple(emoji["aliases"]),
    }

# merge the aliases from the emojilib database
# 1. load the json
with io.open(
    os.path.join(SETUP_RUN_DIR, "emojilib/emojis.json"), "rt", encoding="utf8"  # pylint: disable=bad-continuation
) as emojilib_db:
    EMOJILIB_DB_DATA = json.load(emojilib_db)
# 2. dictionary, keyed by codepoint, of aliases
EMOJILIB_DB_BY_CODEPOINT = {}
for canonical_name, val in EMOJILIB_DB_DATA.items():
    EMOJILIB_DB_BY_CODEPOINT[val["char"]] = tuple(val["keywords"])
# 3. iterate over the gemoji dictionary, updating any common codepoint with the
#    aliases in the emojilib dictionary. use set() to eliminate duplicates (no
#    lexical de-duping tho)
for key, val in EMOJI_DICT.items():
    additional_aliases = EMOJILIB_DB_BY_CODEPOINT.get(val["emoji"], tuple())
    EMOJI_DICT[key]["aliases"] = tuple(set(val["aliases"] + additional_aliases))

with open("emoji_fzf_emojilib.py", "w") as genfile:
    genfile.write(
        """\"\"\"
Emoji python alias file, autogenerated.
\"\"\"

"""
    )
    genfile.write("EMOJIS = {}".format(EMOJI_DICT))


setup(
    # I think using `-` instead of `_` is more user-friendly, but due to python
    # import directives not allowing `-`, keep everything consistent with `_`.
    name="emoji-fzf",
    version="0.2.1",
    description="Emoji searcher for use with fzf",
    author="Noah Pendleton",
    author_email="2538614+noahp@users.noreply.github.com",
    url="https://github.com/noahp/emoji-fzf",
    project_urls={
        "Code": "https://github.com/noahp/emoji-fzf",
        "Issue tracker": "https://github.com/noahp/emoji-fzf/issues",
    },
    long_description=README,
    long_description_content_type="text/markdown",
    install_requires=["click"],
    # using markdown as pypi description:
    # https://dustingram.com/articles/2018/03/16/markdown-descriptions-on-pypi
    setup_requires=["setuptools>=38.6.0", "wheel>=0.31.0", "twine>=1.11.0"],
    py_modules=["emoji_fzf", "emoji_fzf_emojilib"],
    entry_points={"console_scripts": ["emoji-fzf = emoji_fzf:cli"]},
    classifiers=[
        "License :: OSI Approved :: MIT License",
        "Programming Language :: Python :: 2.7",
        "Programming Language :: Python :: 3.6",
        "Programming Language :: Python :: 3.7",
        "Programming Language :: Python :: 3.8",
        "Operating System :: OS Independent",
    ],
)
